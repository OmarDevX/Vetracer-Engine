{"$message_type":"diagnostic","message":"unused import: `os::unix::raw::time_t`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":274,"byte_end":295,"line_start":12,"line_end":12,"column_start":15,"column_end":36,"is_primary":true,"text":[{"text":"use std::{fs, os::unix::raw::time_t, sync::Arc, time::Instant};","highlight_start":15,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":272,"byte_end":295,"line_start":12,"line_end":12,"column_start":13,"column_end":36,"is_primary":true,"text":[{"text":"use std::{fs, os::unix::raw::time_t, sync::Arc, time::Instant};","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `os::unix::raw::time_t`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:12:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{fs, os::unix::raw::time_t, sync::Arc, time::Instant};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Vec3`, `Vector3`, `vec3`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":392,"byte_end":396,"line_start":18,"line_end":18,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"use glm::{vec3, Vec3, Vector3};","highlight_start":11,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":398,"byte_end":402,"line_start":18,"line_end":18,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"use glm::{vec3, Vec3, Vector3};","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":404,"byte_end":411,"line_start":18,"line_end":18,"column_start":23,"column_end":30,"is_primary":true,"text":[{"text":"use glm::{vec3, Vec3, Vector3};","highlight_start":23,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":382,"byte_end":414,"line_start":18,"line_end":19,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use glm::{vec3, Vec3, Vector3};","highlight_start":1,"highlight_end":32},{"text":"use sdl2::{event::WindowEvent, keyboard::Keycode, sys::u_int};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Vec3`, `Vector3`, `vec3`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:18:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse glm::{vec3, Vec3, Vector3};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `sys::u_int`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":464,"byte_end":474,"line_start":19,"line_end":19,"column_start":51,"column_end":61,"is_primary":true,"text":[{"text":"use sdl2::{event::WindowEvent, keyboard::Keycode, sys::u_int};","highlight_start":51,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":462,"byte_end":474,"line_start":19,"line_end":19,"column_start":49,"column_end":61,"is_primary":true,"text":[{"text":"use sdl2::{event::WindowEvent, keyboard::Keycode, sys::u_int};","highlight_start":49,"highlight_end":61}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `sys::u_int`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:19:51\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse sdl2::{event::WindowEvent, keyboard::Keycode, sys::u_int};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary parentheses around `if` condition","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":3694,"byte_end":3695,"line_start":97,"line_end":97,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"                    if(self.new_Object.is_glass){","highlight_start":23,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/window_manager/window_manager.rs","byte_start":3719,"byte_end":3720,"line_start":97,"line_end":97,"column_start":48,"column_end":49,"is_primary":true,"text":[{"text":"                    if(self.new_Object.is_glass){","highlight_start":48,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_parens)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":3694,"byte_end":3695,"line_start":97,"line_end":97,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"                    if(self.new_Object.is_glass){","highlight_start":23,"highlight_end":24}],"label":null,"suggested_replacement":" ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"examples/window_manager/window_manager.rs","byte_start":3719,"byte_end":3720,"line_start":97,"line_end":97,"column_start":48,"column_end":49,"is_primary":true,"text":[{"text":"                    if(self.new_Object.is_glass){","highlight_start":48,"highlight_end":49}],"label":null,"suggested_replacement":" ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around `if` condition\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:97:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if(self.new_Object.is_glass){\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_parens)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    if\u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.new_Object.is_glass\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    if\u001b[0m\u001b[0m\u001b[38;5;10m \u001b[0m\u001b[0mself.new_Object.is_glass\u001b[0m\u001b[0m\u001b[38;5;10m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `TWITTER`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":7526,"byte_end":7533,"line_start":184,"line_end":184,"column_start":56,"column_end":63,"is_primary":true,"text":[{"text":"                    use egui::special_emojis::{GITHUB, TWITTER};","highlight_start":56,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":7524,"byte_end":7533,"line_start":184,"line_end":184,"column_start":54,"column_end":63,"is_primary":true,"text":[{"text":"                    use egui::special_emojis::{GITHUB, TWITTER};","highlight_start":54,"highlight_end":63}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `TWITTER`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:184:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    use egui::special_emojis::{GITHUB, TWITTER};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":785,"byte_end":786,"line_start":28,"line_end":28,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"use window_manager::{window_manager::windows::{MainWindow, SandboxWindow}, *};","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":783,"byte_end":786,"line_start":28,"line_end":28,"column_start":74,"column_end":77,"is_primary":true,"text":[{"text":"use window_manager::{window_manager::windows::{MainWindow, SandboxWindow}, *};","highlight_start":74,"highlight_end":77}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `*`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:28:76\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse window_manager::{window_manager::windows::{MainWindow, SandboxWindow}, *};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `readobj::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":806,"byte_end":816,"line_start":30,"line_end":30,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"use readobj::*;","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":802,"byte_end":818,"line_start":30,"line_end":31,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use readobj::*;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `readobj::*`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:30:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse readobj::*;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary parentheses around `if` condition","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":16880,"byte_end":16881,"line_start":381,"line_end":381,"column_start":11,"column_end":12,"is_primary":true,"text":[{"text":"        if(my_camera.is_moving()){","highlight_start":11,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":16902,"byte_end":16903,"line_start":381,"line_end":381,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"        if(my_camera.is_moving()){","highlight_start":33,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":16880,"byte_end":16881,"line_start":381,"line_end":381,"column_start":11,"column_end":12,"is_primary":true,"text":[{"text":"        if(my_camera.is_moving()){","highlight_start":11,"highlight_end":12}],"label":null,"suggested_replacement":" ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"examples/main.rs","byte_start":16902,"byte_end":16903,"line_start":381,"line_end":381,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"        if(my_camera.is_moving()){","highlight_start":33,"highlight_end":34}],"label":null,"suggested_replacement":" ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around `if` condition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:381:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if(my_camera.is_moving()){\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        if\u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mmy_camera.is_moving()\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        if\u001b[0m\u001b[0m\u001b[38;5;10m \u001b[0m\u001b[0mmy_camera.is_moving()\u001b[0m\u001b[0m\u001b[38;5;10m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary parentheses around `if` condition","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":16950,"byte_end":16951,"line_start":383,"line_end":383,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"        }else if(moveCamera==false){","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":16968,"byte_end":16969,"line_start":383,"line_end":383,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"        }else if(moveCamera==false){","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":16950,"byte_end":16951,"line_start":383,"line_end":383,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"        }else if(moveCamera==false){","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":" ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"examples/main.rs","byte_start":16968,"byte_end":16969,"line_start":383,"line_end":383,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"        }else if(moveCamera==false){","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":" ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around `if` condition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:383:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m383\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }else if(moveCamera==false){\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m383\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        }else if\u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mmoveCamera==false\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m383\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        }else if\u001b[0m\u001b[0m\u001b[38;5;10m \u001b[0m\u001b[0mmoveCamera==false\u001b[0m\u001b[0m\u001b[38;5;10m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated type alias `std::os::unix::raw::time_t`: these type aliases are no longer supported by the standard library, the `libc` crate on crates.io should be used instead for the correct definitions","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":289,"byte_end":295,"line_start":12,"line_end":12,"column_start":30,"column_end":36,"is_primary":true,"text":[{"text":"use std::{fs, os::unix::raw::time_t, sync::Arc, time::Instant};","highlight_start":30,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(deprecated)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated type alias `std::os::unix::raw::time_t`: these type aliases are no longer supported by the standard library, the `libc` crate on crates.io should be used instead for the correct definitions\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:12:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{fs, os::unix::raw::time_t, sync::Arc, time::Instant};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(deprecated)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `repaint_after`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":13313,"byte_end":13326,"line_start":283,"line_end":283,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"        let repaint_after = viewport_output","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":13313,"byte_end":13326,"line_start":283,"line_end":283,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"        let repaint_after = viewport_output","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":"_repaint_after","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `repaint_after`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:283:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let repaint_after = viewport_output\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_repaint_after`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `timestamp`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":15365,"byte_end":15374,"line_start":341,"line_end":341,"column_start":34,"column_end":43,"is_primary":true,"text":[{"text":"        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":34,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":15365,"byte_end":15374,"line_start":341,"line_end":341,"column_start":34,"column_end":43,"is_primary":true,"text":[{"text":"        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":34,"highlight_end":43}],"label":null,"suggested_replacement":"timestamp: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `timestamp`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:341:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `timestamp: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `window_id`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":15376,"byte_end":15385,"line_start":341,"line_end":341,"column_start":45,"column_end":54,"is_primary":true,"text":[{"text":"        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":45,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":15376,"byte_end":15385,"line_start":341,"line_end":341,"column_start":45,"column_end":54,"is_primary":true,"text":[{"text":"        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":45,"highlight_end":54}],"label":null,"suggested_replacement":"window_id: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `window_id`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:341:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `window_id: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `which`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":15387,"byte_end":15392,"line_start":341,"line_end":341,"column_start":56,"column_end":61,"is_primary":true,"text":[{"text":"        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":56,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":15387,"byte_end":15392,"line_start":341,"line_end":341,"column_start":56,"column_end":61,"is_primary":true,"text":[{"text":"        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":56,"highlight_end":61}],"label":null,"suggested_replacement":"which: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `which`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:341:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `which: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `clicks`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":15405,"byte_end":15411,"line_start":341,"line_end":341,"column_start":74,"column_end":80,"is_primary":true,"text":[{"text":"        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":74,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":15405,"byte_end":15411,"line_start":341,"line_end":341,"column_start":74,"column_end":80,"is_primary":true,"text":[{"text":"        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":74,"highlight_end":80}],"label":null,"suggested_replacement":"clicks: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `clicks`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:341:74\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `clicks: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `x`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":15413,"byte_end":15414,"line_start":341,"line_end":341,"column_start":82,"column_end":83,"is_primary":true,"text":[{"text":"        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":82,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":15413,"byte_end":15414,"line_start":341,"line_end":341,"column_start":82,"column_end":83,"is_primary":true,"text":[{"text":"        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":82,"highlight_end":83}],"label":null,"suggested_replacement":"x: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `x`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:341:82\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `x: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `y`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":15416,"byte_end":15417,"line_start":341,"line_end":341,"column_start":85,"column_end":86,"is_primary":true,"text":[{"text":"        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":85,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":15416,"byte_end":15417,"line_start":341,"line_end":341,"column_start":85,"column_end":86,"is_primary":true,"text":[{"text":"        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":85,"highlight_end":86}],"label":null,"suggested_replacement":"y: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `y`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:341:85\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Event::MouseButtonDown { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `y: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `timestamp`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":15879,"byte_end":15888,"line_start":353,"line_end":353,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":32,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":15879,"byte_end":15888,"line_start":353,"line_end":353,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":32,"highlight_end":41}],"label":null,"suggested_replacement":"timestamp: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `timestamp`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:353:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m353\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `timestamp: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `window_id`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":15890,"byte_end":15899,"line_start":353,"line_end":353,"column_start":43,"column_end":52,"is_primary":true,"text":[{"text":"        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":43,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":15890,"byte_end":15899,"line_start":353,"line_end":353,"column_start":43,"column_end":52,"is_primary":true,"text":[{"text":"        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":43,"highlight_end":52}],"label":null,"suggested_replacement":"window_id: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `window_id`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:353:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m353\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `window_id: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `which`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":15901,"byte_end":15906,"line_start":353,"line_end":353,"column_start":54,"column_end":59,"is_primary":true,"text":[{"text":"        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":54,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":15901,"byte_end":15906,"line_start":353,"line_end":353,"column_start":54,"column_end":59,"is_primary":true,"text":[{"text":"        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":54,"highlight_end":59}],"label":null,"suggested_replacement":"which: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `which`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:353:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m353\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `which: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `clicks`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":15919,"byte_end":15925,"line_start":353,"line_end":353,"column_start":72,"column_end":78,"is_primary":true,"text":[{"text":"        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":72,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":15919,"byte_end":15925,"line_start":353,"line_end":353,"column_start":72,"column_end":78,"is_primary":true,"text":[{"text":"        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":72,"highlight_end":78}],"label":null,"suggested_replacement":"clicks: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `clicks`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:353:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m353\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `clicks: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `x`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":15927,"byte_end":15928,"line_start":353,"line_end":353,"column_start":80,"column_end":81,"is_primary":true,"text":[{"text":"        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":80,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":15927,"byte_end":15928,"line_start":353,"line_end":353,"column_start":80,"column_end":81,"is_primary":true,"text":[{"text":"        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":80,"highlight_end":81}],"label":null,"suggested_replacement":"x: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `x`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:353:80\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m353\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `x: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `y`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":15930,"byte_end":15931,"line_start":353,"line_end":353,"column_start":83,"column_end":84,"is_primary":true,"text":[{"text":"        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":83,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":15930,"byte_end":15931,"line_start":353,"line_end":353,"column_start":83,"column_end":84,"is_primary":true,"text":[{"text":"        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{","highlight_start":83,"highlight_end":84}],"label":null,"suggested_replacement":"y: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `y`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:353:83\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m353\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Event::MouseButtonUp { timestamp, window_id, which, mouse_btn, clicks, x, y }=>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `y: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary `unsafe` block","code":{"code":"unused_unsafe","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":13947,"byte_end":13953,"line_start":304,"line_end":304,"column_start":23,"column_end":29,"is_primary":true,"text":[{"text":"            texture = unsafe { create_texture(SCREEN_WIDTH, SCREEN_HEIGHT)}","highlight_start":23,"highlight_end":29}],"label":"unnecessary `unsafe` block","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_unsafe)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `unsafe` block\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:304:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            texture = unsafe { create_texture(SCREEN_WIDTH, SCREEN_HEIGHT)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munnecessary `unsafe` block\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_unsafe)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"fields `speed` and `deceleration` are never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/camera.rs","byte_start":306,"byte_end":312,"line_start":16,"line_end":16,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct Camera {","highlight_start":12,"highlight_end":18}],"label":"fields in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/camera.rs","byte_start":469,"byte_end":474,"line_start":24,"line_end":24,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    pub speed: f32,","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/camera.rs","byte_start":588,"byte_end":600,"line_start":28,"line_end":28,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    pub deceleration: f32,","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: fields `speed` and `deceleration` are never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/camera.rs:24:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Camera {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfields in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub speed: f32,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub deceleration: f32,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `view_matrix` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/camera.rs","byte_start":657,"byte_end":668,"line_start":33,"line_end":33,"column_start":1,"column_end":12,"is_primary":false,"text":[{"text":"impl Camera {","highlight_start":1,"highlight_end":12}],"label":"method in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/camera.rs","byte_start":1523,"byte_end":1534,"line_start":62,"line_end":62,"column_start":12,"column_end":23,"is_primary":true,"text":[{"text":"    pub fn view_matrix(&self, aspect_ratio: f32) -> Mat4 {","highlight_start":12,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `view_matrix` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/camera.rs:62:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Camera {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn view_matrix(&self, aspect_ratio: f32) -> Mat4 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"associated function `new` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/object.rs","byte_start":636,"byte_end":647,"line_start":23,"line_end":23,"column_start":1,"column_end":12,"is_primary":false,"text":[{"text":"impl Object {","highlight_start":1,"highlight_end":12}],"label":"associated function in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/object.rs","byte_start":661,"byte_end":664,"line_start":24,"line_end":24,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new(position: [f32; 3], radius: f32, color: [f32; 3], roughness: f32, emission: f32, is_static: bool) -> Self {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated function `new` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/object.rs:24:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Object {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12massociated function in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(position: [f32; 3], radius: f32, color: [f32; 3], roughness: f32, emission: f32, is_static: bool) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"methods `ui` and `get_sandbox_window` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":6767,"byte_end":6790,"line_start":163,"line_end":163,"column_start":5,"column_end":28,"is_primary":false,"text":[{"text":"    impl<'a> MainWindow<'a> {","highlight_start":5,"highlight_end":28}],"label":"methods in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/window_manager/window_manager.rs","byte_start":7000,"byte_end":7002,"line_start":171,"line_end":171,"column_start":16,"column_end":18,"is_primary":true,"text":[{"text":"        pub fn ui(&mut self, ctx: &egui::Context) {","highlight_start":16,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/window_manager/window_manager.rs","byte_start":12541,"byte_end":12559,"line_start":274,"line_end":274,"column_start":16,"column_end":34,"is_primary":true,"text":[{"text":"        pub fn get_sandbox_window(&self) -> &SandboxWindow {","highlight_start":16,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `ui` and `get_sandbox_window` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:171:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl<'a> MainWindow<'a> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn ui(&mut self, ctx: &egui::Context) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m274\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn get_sandbox_window(&self) -> &SandboxWindow {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct `Vec3` is never constructed","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/readobj.rs","byte_start":99,"byte_end":103,"line_start":6,"line_end":6,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Vec3 {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Vec3` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: struct `Vec3` is never constructed\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/readobj.rs:6:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Vec3 {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Vec3` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct `Triangle` is never constructed","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/readobj.rs","byte_start":168,"byte_end":176,"line_start":12,"line_end":12,"column_start":12,"column_end":20,"is_primary":true,"text":[{"text":"pub struct Triangle {","highlight_start":12,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: struct `Triangle` is never constructed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/readobj.rs:12:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Triangle {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `read_obj_file` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/readobj.rs","byte_start":297,"byte_end":310,"line_start":21,"line_end":21,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"pub fn read_obj_file<P>(filename: P) -> Result<(Vec<Vec3>, Vec<Vec3>, Vec<Triangle>), io::Error>","highlight_start":8,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `read_obj_file` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/readobj.rs:21:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn read_obj_file<P>(filename: P) -> Result<(Vec<Vec3>, Vec<Vec3>, Vec<Triangle>), io::Error>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `prepare_mesh_data` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/readobj.rs","byte_start":4838,"byte_end":4855,"line_start":100,"line_end":100,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn prepare_mesh_data(triangles: &[Triangle]) -> (Vec<f32>, Vec<f32>, Vec<i32>) {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `prepare_mesh_data` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/readobj.rs:100:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn prepare_mesh_data(triangles: &[Triangle]) -> (Vec<f32>, Vec<f32>, Vec<i32>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `SCREEN_WIDTH` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":874,"byte_end":886,"line_start":36,"line_end":36,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"    let mut SCREEN_WIDTH = 1280;","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":874,"byte_end":886,"line_start":36,"line_end":36,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"    let mut SCREEN_WIDTH = 1280;","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":"screen_width","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SCREEN_WIDTH` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:36:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut SCREEN_WIDTH = 1280;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `screen_width`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `SCREEN_HEIGHT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":907,"byte_end":920,"line_start":37,"line_end":37,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"    let mut SCREEN_HEIGHT = 700;","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":907,"byte_end":920,"line_start":37,"line_end":37,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"    let mut SCREEN_HEIGHT = 700;","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":"screen_height","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SCREEN_HEIGHT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:37:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut SCREEN_HEIGHT = 700;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `screen_height`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `moveCamera` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":1078,"byte_end":1088,"line_start":42,"line_end":42,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"    let mut moveCamera=false;","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":1078,"byte_end":1088,"line_start":42,"line_end":42,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"    let mut moveCamera=false;","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":"move_camera","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `moveCamera` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:42:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut moveCamera=false;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `move_camera`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":4425,"byte_end":4431,"line_start":124,"line_end":124,"column_start":101,"column_end":107,"is_primary":true,"text":[{"text":"        let pos_attrib = gl::GetAttribLocation(quad_shader_program, CString::new(\"in_pos\").unwrap().as_ptr());","highlight_start":101,"highlight_end":107}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":4393,"byte_end":4424,"line_start":124,"line_end":124,"column_start":69,"column_end":100,"is_primary":false,"text":[{"text":"        let pos_attrib = gl::GetAttribLocation(quad_shader_program, CString::new(\"in_pos\").unwrap().as_ptr());","highlight_start":69,"highlight_end":100}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(temporary_cstring_as_ptr)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:124:101\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let pos_attrib = gl::GetAttribLocation(quad_shader_program, CString::new(\"in_pos\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(temporary_cstring_as_ptr)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":8192,"byte_end":8198,"line_start":209,"line_end":209,"column_start":114,"column_end":120,"is_primary":true,"text":[{"text":"    let camera_position_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_pos\").unwrap().as_ptr());","highlight_start":114,"highlight_end":120}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":8156,"byte_end":8191,"line_start":209,"line_end":209,"column_start":78,"column_end":113,"is_primary":false,"text":[{"text":"    let camera_position_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_pos\").unwrap().as_ptr());","highlight_start":78,"highlight_end":113}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:209:114\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let camera_position_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_pos\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":8400,"byte_end":8406,"line_start":211,"line_end":211,"column_start":113,"column_end":119,"is_primary":true,"text":[{"text":"    let camera_front_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_front\").unwrap().as_ptr());","highlight_start":113,"highlight_end":119}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":8362,"byte_end":8399,"line_start":211,"line_end":211,"column_start":75,"column_end":112,"is_primary":false,"text":[{"text":"    let camera_front_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_front\").unwrap().as_ptr());","highlight_start":75,"highlight_end":112}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:211:113\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let camera_front_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_front\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":8605,"byte_end":8611,"line_start":213,"line_end":213,"column_start":107,"column_end":113,"is_primary":true,"text":[{"text":"    let camera_up_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_up\").unwrap().as_ptr());","highlight_start":107,"highlight_end":113}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":8570,"byte_end":8604,"line_start":213,"line_end":213,"column_start":72,"column_end":106,"is_primary":false,"text":[{"text":"    let camera_up_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_up\").unwrap().as_ptr());","highlight_start":72,"highlight_end":106}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:213:107\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let camera_up_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_up\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":8804,"byte_end":8810,"line_start":215,"line_end":215,"column_start":113,"column_end":119,"is_primary":true,"text":[{"text":"    let camera_right_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_right\").unwrap().as_ptr());","highlight_start":113,"highlight_end":119}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":8766,"byte_end":8803,"line_start":215,"line_end":215,"column_start":75,"column_end":112,"is_primary":false,"text":[{"text":"    let camera_right_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_right\").unwrap().as_ptr());","highlight_start":75,"highlight_end":112}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:215:113\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let camera_right_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_right\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":9004,"byte_end":9010,"line_start":217,"line_end":217,"column_start":102,"column_end":108,"is_primary":true,"text":[{"text":"    let camera_fov_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"fov\").unwrap().as_ptr());","highlight_start":102,"highlight_end":108}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":8975,"byte_end":9003,"line_start":217,"line_end":217,"column_start":73,"column_end":101,"is_primary":false,"text":[{"text":"    let camera_fov_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"fov\").unwrap().as_ptr());","highlight_start":73,"highlight_end":101}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:217:102\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let camera_fov_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"fov\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":9176,"byte_end":9182,"line_start":219,"line_end":219,"column_start":115,"column_end":121,"is_primary":true,"text":[{"text":"    let object_pos_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_position\").unwrap().as_ptr());","highlight_start":115,"highlight_end":121}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":9134,"byte_end":9175,"line_start":219,"line_end":219,"column_start":73,"column_end":114,"is_primary":false,"text":[{"text":"    let object_pos_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_position\").unwrap().as_ptr());","highlight_start":73,"highlight_end":114}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:219:115\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let object_pos_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_position\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":9300,"byte_end":9306,"line_start":220,"line_end":220,"column_start":114,"column_end":120,"is_primary":true,"text":[{"text":"    let object_color_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_color\").unwrap().as_ptr());","highlight_start":114,"highlight_end":120}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":9261,"byte_end":9299,"line_start":220,"line_end":220,"column_start":75,"column_end":113,"is_primary":false,"text":[{"text":"    let object_color_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_color\").unwrap().as_ptr());","highlight_start":75,"highlight_end":113}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:220:114\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let object_color_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_color\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":9426,"byte_end":9432,"line_start":221,"line_end":221,"column_start":116,"column_end":122,"is_primary":true,"text":[{"text":"    let object_radius_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_radius\").unwrap().as_ptr());","highlight_start":116,"highlight_end":122}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":9386,"byte_end":9425,"line_start":221,"line_end":221,"column_start":76,"column_end":115,"is_primary":false,"text":[{"text":"    let object_radius_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_radius\").unwrap().as_ptr());","highlight_start":76,"highlight_end":115}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:221:116\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let object_radius_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_radius\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":9551,"byte_end":9557,"line_start":222,"line_end":222,"column_start":115,"column_end":121,"is_primary":true,"text":[{"text":"    let roughness_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_roughness\").unwrap().as_ptr());","highlight_start":115,"highlight_end":121}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":9508,"byte_end":9550,"line_start":222,"line_end":222,"column_start":72,"column_end":114,"is_primary":false,"text":[{"text":"    let roughness_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_roughness\").unwrap().as_ptr());","highlight_start":72,"highlight_end":114}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:222:115\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let roughness_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_roughness\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":9674,"byte_end":9680,"line_start":223,"line_end":223,"column_start":113,"column_end":119,"is_primary":true,"text":[{"text":"    let emission_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_emission\").unwrap().as_ptr());","highlight_start":113,"highlight_end":119}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":9632,"byte_end":9673,"line_start":223,"line_end":223,"column_start":71,"column_end":112,"is_primary":false,"text":[{"text":"    let emission_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_emission\").unwrap().as_ptr());","highlight_start":71,"highlight_end":112}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:223:113\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let emission_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_emission\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":9787,"byte_end":9793,"line_start":224,"line_end":224,"column_start":103,"column_end":109,"is_primary":true,"text":[{"text":"    let is_cube_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_cube\").unwrap().as_ptr());","highlight_start":103,"highlight_end":109}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":9754,"byte_end":9786,"line_start":224,"line_end":224,"column_start":70,"column_end":102,"is_primary":false,"text":[{"text":"    let is_cube_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_cube\").unwrap().as_ptr());","highlight_start":70,"highlight_end":102}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:224:103\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let is_cube_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_cube\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":9910,"byte_end":9916,"line_start":225,"line_end":225,"column_start":113,"column_end":119,"is_primary":true,"text":[{"text":"    let objects_size_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_size\").unwrap().as_ptr());","highlight_start":113,"highlight_end":119}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":9872,"byte_end":9909,"line_start":225,"line_end":225,"column_start":75,"column_end":112,"is_primary":false,"text":[{"text":"    let objects_size_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_size\").unwrap().as_ptr());","highlight_start":75,"highlight_end":112}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:225:113\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let objects_size_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"objects_size\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":10025,"byte_end":10031,"line_start":227,"line_end":227,"column_start":104,"column_end":110,"is_primary":true,"text":[{"text":"    let time_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"currentTime\").unwrap().as_ptr());","highlight_start":104,"highlight_end":110}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":9988,"byte_end":10024,"line_start":227,"line_end":227,"column_start":67,"column_end":103,"is_primary":false,"text":[{"text":"    let time_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"currentTime\").unwrap().as_ptr());","highlight_start":67,"highlight_end":103}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:227:104\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let time_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"currentTime\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":10151,"byte_end":10157,"line_start":228,"line_end":228,"column_start":116,"column_end":122,"is_primary":true,"text":[{"text":"    let accumulation_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_accumulation\").unwrap().as_ptr());","highlight_start":116,"highlight_end":122}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":10110,"byte_end":10150,"line_start":228,"line_end":228,"column_start":75,"column_end":115,"is_primary":false,"text":[{"text":"    let accumulation_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_accumulation\").unwrap().as_ptr());","highlight_start":75,"highlight_end":115}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:228:116\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let accumulation_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_accumulation\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":10270,"byte_end":10276,"line_start":229,"line_end":229,"column_start":109,"column_end":115,"is_primary":true,"text":[{"text":"    let is_fisheye_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_fisheye\").unwrap().as_ptr());","highlight_start":109,"highlight_end":115}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":10234,"byte_end":10269,"line_start":229,"line_end":229,"column_start":73,"column_end":108,"is_primary":false,"text":[{"text":"    let is_fisheye_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_fisheye\").unwrap().as_ptr());","highlight_start":73,"highlight_end":108}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:229:109\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let is_fisheye_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_fisheye\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":10385,"byte_end":10391,"line_start":230,"line_end":230,"column_start":105,"column_end":111,"is_primary":true,"text":[{"text":"    let skycolor_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"skycolor\").unwrap().as_ptr());","highlight_start":105,"highlight_end":111}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":10351,"byte_end":10384,"line_start":230,"line_end":230,"column_start":71,"column_end":104,"is_primary":false,"text":[{"text":"    let skycolor_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"skycolor\").unwrap().as_ptr());","highlight_start":71,"highlight_end":104}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:230:105\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let skycolor_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"skycolor\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":10509,"byte_end":10515,"line_start":231,"line_end":231,"column_start":114,"column_end":120,"is_primary":true,"text":[{"text":"    let camera_vel_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_velocity\").unwrap().as_ptr());","highlight_start":114,"highlight_end":120}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":10468,"byte_end":10508,"line_start":231,"line_end":231,"column_start":73,"column_end":113,"is_primary":false,"text":[{"text":"    let camera_vel_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_velocity\").unwrap().as_ptr());","highlight_start":73,"highlight_end":113}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:231:114\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let camera_vel_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"camera_velocity\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":10630,"byte_end":10636,"line_start":232,"line_end":232,"column_start":111,"column_end":117,"is_primary":true,"text":[{"text":"    let object_isglass_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_glass\").unwrap().as_ptr());","highlight_start":111,"highlight_end":117}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":10596,"byte_end":10629,"line_start":232,"line_end":232,"column_start":77,"column_end":110,"is_primary":false,"text":[{"text":"    let object_isglass_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_glass\").unwrap().as_ptr());","highlight_start":77,"highlight_end":110}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:232:111\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let object_isglass_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_glass\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":10755,"byte_end":10761,"line_start":233,"line_end":233,"column_start":115,"column_end":121,"is_primary":true,"text":[{"text":"    let object_reflectness_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_glass\").unwrap().as_ptr());","highlight_start":115,"highlight_end":121}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":10721,"byte_end":10754,"line_start":233,"line_end":233,"column_start":81,"column_end":114,"is_primary":false,"text":[{"text":"    let object_reflectness_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_glass\").unwrap().as_ptr());","highlight_start":81,"highlight_end":114}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:233:115\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let object_reflectness_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"is_glass\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `tVec` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"examples/object.rs","byte_start":3866,"byte_end":3870,"line_start":95,"line_end":95,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let tVec=vec3(self.velocity[0], self.velocity[1], self.velocity[2]);","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"examples/object.rs","byte_start":3866,"byte_end":3870,"line_start":95,"line_end":95,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let tVec=vec3(self.velocity[0], self.velocity[1], self.velocity[2]);","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"t_vec","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `tVec` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/object.rs:95:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let tVec=vec3(self.velocity[0], self.velocity[1], self.velocity[2]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `t_vec`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `myPos` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"examples/object.rs","byte_start":6367,"byte_end":6372,"line_start":160,"line_end":160,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"            let mut myPos=self.position;","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"examples/object.rs","byte_start":6367,"byte_end":6372,"line_start":160,"line_end":160,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"            let mut myPos=self.position;","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":"my_pos","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `myPos` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/object.rs:160:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut myPos=self.position;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `my_pos`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `otherPos` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"examples/object.rs","byte_start":6408,"byte_end":6416,"line_start":161,"line_end":161,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"            let mut otherPos=other.position;","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"examples/object.rs","byte_start":6408,"byte_end":6416,"line_start":161,"line_end":161,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"            let mut otherPos=other.position;","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":"other_pos","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `otherPos` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/object.rs:161:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut otherPos=other.position;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `other_pos`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `Objects` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":145,"byte_end":152,"line_start":8,"line_end":8,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        pub Objects: Vec<Object>,","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":145,"byte_end":152,"line_start":8,"line_end":8,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        pub Objects: Vec<Object>,","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"objects","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Objects` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:8:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub Objects: Vec<Object>,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `objects`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `new_Object` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":179,"byte_end":189,"line_start":9,"line_end":9,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        pub new_Object: Object,","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":179,"byte_end":189,"line_start":9,"line_end":9,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        pub new_Object: Object,","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":"new_object","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `new_Object` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:9:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub new_Object: Object,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `new_object`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"60 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 60 warnings emitted\u001b[0m\n\n"}
